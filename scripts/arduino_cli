#!/usr/bin/env bash

DIALOG="$(command -v dialog)" || { printf "%s\n" "Can't find dialog binary. Aborting." && exit 1; }
ACLI="$(command -v arduino-cli)"
COMMAND="${ACLI}"
CONFIGDIR="${HOME}/.arduino15"
PREF_FILE="${CONFIGDIR}"/preferences.txt
CONFIGFILE="${CONFIGDIR}/arduino-cli.yaml"
LOGLEVEL="$(grep level "${CONFIGFILE}" |awk '{printf "%s", $2}')"
LOGFORMAT="$(grep format "${CONFIGFILE}" |awk '{printf "%s", $2}')"
LOGFILE="$(grep file "${CONFIGFILE}" |awk '{printf "%s", $2}')"
SKETCHDIR="$(grep user "${CONFIGFILE}" |awk '{printf "%s", $2}')"
BUILDIR="/tmp/arduino-cli-build/build"; [[ ! -d "${BUILDIR}" ]] && mkdir -p "${BUILDIR}"
CACHEDIR="/tmp/arduino-cli-build/cache"; [[ ! -d "${CACHEDIR}" ]] && mkdir -p "${CACHEDIR}"
declare -a _TERMINAL=( alacritty_wrap --class "alacritty,alacritty_floating" -e )
RC=0
LAST_PACKAGE="$(grep target_package "${PREF_FILE}" |cut -d'=' -f2)"
LAST_PLATFORM="$(grep target_platform "${PREF_FILE}" |cut -d'=' -f2)"
LAST_CPU="$(grep custom_cpu "${PREF_FILE}" |cut -d'=' -f2)"; LAST_CPU="${LAST_CPU/_/:cpu=}"
DEFAULT_BOARD="${LAST_PACKAGE}:${LAST_PLATFORM}:${LAST_CPU}"

DIALOG_OK=0					#
DIALOG_CANCEL=1					#
DIALOG_HELP=2					# Possible dialog return values
DIALOG_EXTRA=3					# for $?
DIALOG_ITEM_HELP=4				#
DIALOG_ESC=255					#

SIG_NONE=0					#
SIG_HUP=1					#
SIG_INT=2					# System signals for trap
SIG_QUIT=3					#
SIG_KILL=9					#
SIG_TERM=15					#

_backtitle="dialog front-end for $(${ACLI} version |awk '{printf "%s %s %s\n", $1, $3, $5}')"
declare -a _global_dialog_opts=( --clear --no-shadow --backtitle "${_backtitle}" )
tempfile=/tmp/acli_$$

#############################################################################
#				Trap signals				    #
#############################################################################
#_SLEEP=$(command -v sleep)
#trap 'set +x; ${_SLEEP} 0.15; set -x' DEBUG

trap 'clear; rm -f ${tempfile}' 0 "$SIG_NONE" "$SIG_HUP" "$SIG_INT" "$SIG_QUIT" "$SIG_TERM"

#############################################################################
#				Functions				    #
#############################################################################

# get_term_size()
# Gets the terminal size as reported by dialog and places it in two provided
# variables. We can not run dialog in a sub-process or we will always get the
# default term size of 24x80.
# depends: dialog
# parameters: 1- Name of the terminal height variable (defaults T_HEIGHT)
#             2- Name of the terminal width variable (defaults T_WIDTH)
# output: none, just fills the variables
#
get_term_size()
{
	local IFS=$' '
	local tempfile="/tmp/gts_$$" _term_h _term_w
	local -a _sizes
	declare -n _term_h=${1:-T_HEIGHT}
	declare -n _term_w=${2:-T_WIDTH}
	dialog --print-maxsize 2> ${tempfile}
	_sizes=( $(sed -E 's/^.*\: ([0-9]{1,}), ([0-9]{1,})/\1 \2/g' <${tempfile}) )
	_term_h=${_sizes[0]:-0}
	_term_w=${_sizes[1]:-0}
	rm -f ${tempfile}
}

# check the return code of a dialog item to abort script
# parameters $1 = return code (usually $?)
#
get_result()
{
	case ${1} in
		"${DIALOG_ESC}") clear
			echo "Abortado"
			exit 3;;
		*) return "${1}"
			;;
	esac
}

inputbox_form()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " ${1} " \
		--inputbox "${2}" \
		$((_H*2/3)) $((_W*2/3)) \
		"${3}" 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return ${RC}
	fi
}

inputbox_extra_form()
{
	${DIALOG} "${_global_dialog_opts[@]}" --extra-button --extra-label "${4}" --title " ${1} " \
		--inputbox "${2}" \
		$((_H*2/3)) $((_W*2/3)) \
		"${3}" 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return ${RC}
	fi
}

dselect_form()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " ${1} " \
		--dselect "${2}" \
		$((_H*2/3>11?_H*2/3:11)) $((_W*2/3)) \
		2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return ${RC}
	fi
}

fselect_form()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " ${1} " \
		--fselect "${2}" \
		$((_H*2/3>11?_H*2/3:11)) $((_W*2/3)) \
		2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return ${RC}
	fi
}

output_textbox_form()
{
	${2} >"${tempfile}" 2>&1
	${DIALOG} "${_global_dialog_opts[@]}" --title " ${1} " \
	--textbox "${tempfile}" $((_H*2/3)) $((_W*2/3))
	RC=$?
	if ! get_result ${RC}; then
		return ${RC}
	fi
}

output_prgbox_form()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " ${1} " \
	--prgbox "${2}" $((_H*2/3)) $((_W*2/3))
	RC=$?
	if ! get_result ${RC}; then
		return ${RC}
	fi
}

waiting_form()
{
	${DIALOG} --backtitle "${_backtitle}" --title " ${1} " \
		--infobox "Running" \
		3 17
}

#############################################################################
#				Menus					    #
#############################################################################

global_flags_menu()
{
	local j=0
	declare -a FLAGS
	${DIALOG} "${_global_dialog_opts[@]}" --title " Available flags " \
		--checklist "Commonly default values are correct." $((_H*2/3)) $((_W*2/3)) 4 \
		"config-file" "The custom config file" off \
		"log-file" "Path to the file where logs will be written" off \
		"log-format" "The output format for the logs, can be {text|json}" off \
		"log-level" "Valid levels are: trace, debug, info, warn, error, fatal, panic" off 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	FLAGS=( $(cat "${tempfile}") )
	while [ $j -ne ${#FLAGS[*]} ]; do
		case ${FLAGS[$j]} in
			config-file) inputbox_form " Available flags " "Choose a custom config file only for this command run" "${CONFIGFILE}"
				COMMAND+=" --config-file $(cat ${tempfile})"
				;;
			log-file) inputbox_form " Available flags " "Choose a log file only for this command run" "${LOGFILE}"
				COMMAND+=" --log-file $(cat ${tempfile})"
				;;
			log-format) inputbox_form " Available flags " "Choose a log file format only for this command run" "${LOGFORMAT}"
				COMMAND+=" --log-format $(cat ${tempfile})"
				;;
			log-level) inputbox_form " Available flags " "Choose a log level only for this command run" "${LOGLEVEL}"
				COMMAND+=" --log-level $(cat ${tempfile})"
				;;
		esac
		(( j++ ))
	done
}

board_menu()
{
	# available board commands
	${DIALOG} "${_global_dialog_opts[@]}" --title " Board related commands " \
		--menu "Select command. ESC to quit the script or Cancel to return to main menu." $((_H*2/3)) $((_W*2/3)) 4 \
		"attach" "Attaches a sketch to a board." \
		"details" "Print details about a board." \
		"list" "List connected boards." \
		"listall" "List all known boards and their corresponding FQBN."\
		2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	BOARD_CMD="$(cat "${tempfile}")"
	COMMAND="${COMMAND} board ${BOARD_CMD}"
	echo "${COMMAND}"
	case "${BOARD_CMD}" in
		"attach") inputbox_form " Attach parameters " "Set port of FQBN to attach:
Eg: serial:///dev/ttyACM0
or: arduino:samd:mkr1000" "serial:///dev/ttyACM0"
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND="${COMMAND} $(cat ${tempfile})"
			dselect_form "Sketch to build Path" "${SKETCHDIR}/"
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND="${COMMAND} $(cat ${tempfile})"
			global_flags_menu
			output_prgbox_form " Attach output " "${COMMAND}"
			;;
		"details") ${DIALOG} "${_global_dialog_opts[@]}" --title " Details parameters " \
			--radiolist "Available flags" $((_H*2/3)) $((_W*2/3)) 4 \
			"fqbn" "Fully Qualified Board Name, e.g.: arduino:avr:uno" off \
			"full" "Show full board details" on \
			"help" "help for details" off \
			"list-programmers" "Show list of available programmers" off 2> ${tempfile}
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND="${COMMAND} --$(cat ${tempfile})"
			inputbox_form " Details parameters " ""  "$DEFAULT_BOARD"
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND="${COMMAND} -b $(cat ${tempfile})"
			global_flags_menu
			output_prgbox_form " Details output " "${COMMAND}"
			;;
		"list") output_prgbox_form " Connected devices list " "${COMMAND}"
			;;
		"listall") output_textbox_form " Available devices' list " "${COMMAND}"
			;;
	esac
	return "${RC}"
}

burn_menu()
{
	local j=0
	declare -a FLAGS
	COMMAND+=" burn-bootloader"
	${DIALOG} "${_global_dialog_opts[@]}" --title " Available flags for bootloader burn" \
		--checklist "Commonly default values are correct." $((_H*2/3)) $((_W*2/3)) 4 \
		"fqbn" "Fully Qualified Board Name, e.g.: arduino:avr:uno" on \
		"port" "Upload port, e.g.: COM10 or /dev/ttyACM0" on \
		"programmer" "Use the specified programmer to upload" on \
		"verify" "Verify uploaded binary after the upload" off 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	FLAGS=( $(cat "${tempfile}") )
	while [ $j -ne ${#FLAGS[*]} ]; do
		case ${FLAGS[$j]} in
			fqbn) inputbox_form " Burn Bootloader " "Fully Qualified Board Name" "$DEFAULT_BOARD"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --fqbn $(cat ${tempfile})"
				;;
			port) inputbox_form " Burn Bootloader " "Upload port" "/dev/ttyACM0"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --port $(cat ${tempfile})"
				;;
			programmer) inputbox_form " Burn Bootloader " "Use the specified programmer to upload" "avrisp"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --programmer $(cat ${tempfile})"
				;;
			verify) COMMAND+=" --verify"
				;;
		esac
		(( j++ ))
	done
	[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
	global_flags_menu
	output_textbox_form "Burn bootloader output" "${COMMAND}"
	return "${RC}"
}

cache_menu()
{
	COMMAND+=" cache clean"
	global_flags_menu
	output_prgbox_form "Cache clean output" "${COMMAND}"
}

compile_menu()
{
	local j=0
	declare -a FLAGS
	COMMAND+=" compile"
	${DIALOG} "${_global_dialog_opts[@]}" --title " Available flags for compile" \
		--checklist "Commonly default values are correct." $((_H*2/3)) $((_W*2/3)) $((_H/3)) \
		"build-cache-path" "Builds of 'core.a' are saved into this path to be cached and reused" on \
		"build-path" "Path where to save compiled files. If omitted, a directory will be created" on \
		"build-property" "Override a build property with a custom value. Can be used multiple times" off \
		"clean" "Optional, cleanup the build folder and do not use any cached build" on \
		"export-binaries" "If set built binaries will be exported to the sketch folder" on \
		"fqbn" "Fully Qualified Board Name, e.g.: arduino:avr:uno" on \
		"libraries" "List of custom libraries paths separated by commas" off \
		"optimize-for-debug" "Optional, optimize compile output for debugging" off \
		"port" "Upload port, e.g.: COM10 or /dev/ttyACM0" on \
		"preprocess" "Print preprocessed code to stdout instead of compiling" off \
		"programmer" "Optional, use the specified programmer to upload" off \
		"quiet" "Optional, suppresses almost every output" off \
		"show-properties" "Show all build properties used instead of compiling" off \
		"upload" "Upload the binary after the compilation" off \
		"verify" "Verify uploaded binary after the upload" off \
		"vid-pid" "When specified, VID/PID specific build properties are used, if board supports them" off \
		"warnings" "Can be 'none', 'default', 'more' and 'all'. Defaults to 'none'. Used to tell gcc which warning level to use" off \
		2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	FLAGS=( $(cat "${tempfile}") )
	while [ $j -ne ${#FLAGS[*]} ]; do
		case ${FLAGS[$j]} in
			build-cache-path) dselect_form "Builds of 'core.a' are saved into this path to be cached and reused" "${CACHEDIR}"
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --build-cache-path $(cat ${tempfile})"
				;;
			build-path) dselect_form "Path where to save compiled files. If omitted, a directory will be created" "${BUILDIR}"
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --build-path $(cat ${tempfile})"
				;;
			build-property) inputbox_form "Compile build prperty" "Override a build property with a custom value. Can be used multiple times" ""
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --build-property $(cat ${tempfile})"
				;;
			clean) COMMAND+=" --clean"
				;;
			export-binaries) COMMAND+=" --export-binaries"
				;;
			fqbn) inputbox_form " Compile fqbn " "Fully Qualified Board Name" "$DEFAULT_BOARD"
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --fqbn $(cat ${tempfile})"
				;;
			libraries) inputbox_form " Compile libraries " "List of custom libraries paths separated by commas" ""
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --libraries $(cat ${tempfile})"
				;;
			optimize-for-debug) COMMAND+=" --optimize-for-debug"
				;;
			port) inputbox_form " Compile " "Upload port" "/dev/ttyACM0"
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --port $(cat ${tempfile})"
				;;
			preprocess) COMMAND+=" --preprocess"
				;;
			programmer) inputbox_form " Compile " "Use the specified programmer to upload" "avrisp"
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --programmer $(cat ${tempfile})"
				;;
			quiet) COMMAND+=" --quiet"
				;;
			show-properties) COMMAND+=" --show-properties"
				;;
			upload) COMMAND+=" --upload"
				;;
			verify) COMMAND+=" --verify"
				;;
			vid-pid) inputbox_form " Compile VID/PID " "VID/PID specific build properties are used, if board supports them" ""
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --vid-pid $(cat ${tempfile})"
				;;
			warnings)inputbox_form " Compile GCC WArnings " "Can be 'none', 'default', 'more' and 'all'. Defaults to 'none'. Used to tell gcc which warning level to use" ""
				[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --warnings $(cat ${tempfile})"
				;;
		esac
		(( j++ ))
	done
	if [ -n "${LAST_SELECTED_INO}" ]; then
		fselect_form "Sketch to build Path" "${LAST_SELECTED_INO}"
	else
		fselect_form "Sketch to build Path" "${SKETCHDIR}/"
	fi
	[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
	COMMAND+=" $(cat ${tempfile})"
	LAST_SELECTED_INO="$(cat ${tempfile})"
	output_textbox_form "Compile output" "${COMMAND}"
	return "${RC}"
}

core_menu()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " Core related commands " \
		--menu "Select command. ESC or Cancel to exit" $((_H*2/3)) $((_W*2/3)) 7 \
		"download" "Downloads one or more cores and corresponding tool dependencies" \
		"install" "Installs one or more cores and corresponding tool dependencies." \
		"list" "Shows the list of installed platforms" \
		"search" "Search for a core in Boards Manager" \
		"uninstall" "Uninstalls one or more cores and corresponding tool dependencies if no longer used" \
		"update-index" "Updates the index of cores" \
		"upgrade" "Upgrades one or all installed platforms to the latest version" \
		2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	CORE_CMD="$(cat "${tempfile}")"
	COMMAND="${COMMAND} core ${CORE_CMD}"
	echo "${COMMAND}"
	case "${CORE_CMD}" in
		"download") inputbox_form " Core download " "PACKAGER:ARCH[@VERSION]](S)
eg:
arduino:samd@1.6.9"
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			global_flags_menu
			output_prgbox_form " Core download output " "${COMMAND}"
			;;
		"install") inputbox_form "Core install" "PACKAGER:ARCH[@VERSION]](S)
eg:
arduino:samd@1.6.9"
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			global_flags_menu
			output_prgbox_form " Core install output " "${COMMAND}"
			;;

		"list") output_prgbox_form " List of installed platforms " "${COMMAND}"
			;;
		"search") inputbox_form "Core Search" "Search for a core in Boards Manager using the specified keywords
eg:
MKRZero -a -v
where:
-a, --all     Show all available core versions
-v, --verbose Print the logs on the standard output" ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			output_textbox_form " Cores' list " "${COMMAND}"
			;;
		"uninstall") inputbox_form "Core uninstall" "Uninstalls one or more cores and corresponding tool dependencies if no longer used.
e.g:
PACKAGER:ARCH ..." ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			output_textbox_form " Core uninstall output " "${COMMAND}"
			;;
		"update-index") global_flags_menu
			output_prgbox_form " Core update output " "${COMMAND}"
			;;
		"upgrade") inputbox_form "Core upgrade" "Upgrades one or all installed platforms to the latest version.
set platforms [PACKAGER:ARCH] ...
or empty for all" ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			global_flags_menu
			output_textbox_form " Core upgrade output " "${COMMAND}"
			;;
	esac
	return "${RC}"
}

debug_menu()
{
	local j=0
	declare -a FLAGS
	COMMAND+=" debug"
	${DIALOG} "${_global_dialog_opts[@]}" --title " Available flags for debug" \
		--checklist "Commonly default values are correct." $((_H*2/3)) $((_W*2/3)) 5 \
		"fqbn" "Fully Qualified Board Name, e.g.: arduino:avr:uno" on \
		"port" "Upload port, e.g.: COM10 or /dev/ttyACM0" on \
		"programmer" "Use the specified programmer to debug" on \
		"input-dir" "Directory containing binaries for debug" off \
		"interpreter" "Debug interpreter e.g.: console, mi, mi1, mi2, mi3 (default console')" off 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	FLAGS=( $(cat "${tempfile}") )
	while [ $j -ne ${#FLAGS[*]} ]; do
		case ${FLAGS[$j]} in
			fqbn) inputbox_form " Debug " "Fully Qualified Board Name" "$DEFAULT_BOARD"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --fqbn $(cat ${tempfile})"
				;;
			port) inputbox_form " Debug " "Upload port" "/dev/ttyACM0"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --port $(cat ${tempfile})"
				;;
			programmer) inputbox_form " Debug " "Use the specified programmer for debugging" "avrisp"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --programmer $(cat ${tempfile})"
				;;
			input-dir) dselect_form "Directory containing binaries for debug." "${BUILDIR:-${SKETCHDIR}}"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --input-dir $(cat ${tempfile})"
				;;
			interpreter) inputbox_form " Debug " "Debug interpreter, default 'console'" "console"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --interpreter $(cat ${tempfile})"
				;;
		esac
		(( j++ ))
	done
	global_flags_menu
	inputbox_form " Debug " "Sketch to debug Path" "${SKETCHDIR}/MySketch"
	[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
	COMMAND+=" $(cat ${tempfile})"
	clear
	${COMMAND}
	return "${RC}"
}

upload_menu()
{
	local j=0
	declare -a FLAGS
	COMMAND+=" upload"
	${DIALOG} "${_global_dialog_opts[@]}" --title " Available flags for upload" \
		--checklist "Commonly default values are correct." $((_H*2/3)) $((_W*2/3)) 6 \
		"fqbn" "Fully Qualified Board Name, e.g.: arduino:avr:uno" on \
		"port" "Upload port, e.g.: COM10 or /dev/ttyACM0" on \
		"programmer" "Optional, use the specified programmer to upload" off \
		"input-dir" "Directory containing binaries to upload" off \
		"input-file" "Binary file to upload" on \
		"verify" "Verify uploaded binary after the upload" off 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	FLAGS=( $(cat "${tempfile}") )
	while [ $j -ne ${#FLAGS[*]} ]; do
		case ${FLAGS[$j]} in
			fqbn) inputbox_form " Burn Bootloader " "Fully Qualified Board Name" "$DEFAULT_BOARD"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --fqbn $(cat ${tempfile})"
				;;
			port) inputbox_form " Burn Bootloader " "Upload port" "/dev/ttyACM0"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --port $(cat ${tempfile})"
				;;
			programmer) inputbox_form " Burn Bootloader " "Use the specified programmer to upload" "avrisp"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --programmer $(cat ${tempfile})"
				;;
			verify) COMMAND+=" --verify"
				;;
			input-dir) dselect_form "Directory containing binaries to upload" "${SKETCHDIR}/"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --input-dir $(cat ${tempfile})"
				;;
			input-file) if [ -n "${LAST_SELECTED_HEX}" ]; then
					fselect_form "Binary file to upload" "${LAST_SELECTED_HEX}"
				else
					fselect_form "Binary file to upload" "${SKETCHDIR}/"
				fi
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				COMMAND+=" --input-file $(cat ${tempfile})"
				LAST_SELECTED_HEX="$(cat ${tempfile})"
				;;
		esac
		(( j++ ))
	done
	[[ ${RC} -eq ${DIALOG_CANCEL} ]] && return 0
	global_flags_menu
	[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
	output_textbox_form "Upload output" "${COMMAND}"
	return "${RC}"
}

sketch_menu()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " Sketch menu " \
		--radiolist "Select action:" $((_H*2/3)) $((_W*2/3)) 8 \
		"new" "Create a new Sketch" on \
		"archive" "TODO -- Create a zip file containing all sketch files" off \
		"edit" "Call editor defined in environment, if any" off 2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	SKETCH_CMD="$(cat "${tempfile}")"
	COMMAND="${COMMAND} sketch ${SKETCH_CMD}"
	case "${SKETCH_CMD}" in
		new) inputbox_form " Sketch " " Create a new sketch " "${SKETCHDIR}/"
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			;;
		archive) ;;
		edit)   if [ -n "${EDITOR}" ]; then
				fselect_form "File to edit" "${SKETCHDIR}"
				[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
				if [ -n "${DISPLAY}" ]; then
					"${_TERMINAL[@]}" "${EDITOR} $(cat ${tempfile})" 2>/dev/null
				else
					${EDITOR} "$(cat ${tempfile})"
				fi
				LAST_SELECTED_INO="$(cat ${tempfile})"
				return 0
			else
				"${DIALOG}" "${_global_dialog_opts[@]}" --title " Sketch menu " \
					--infobox "No editor defined" 3 19
			fi
			;;
	esac
	global_flags_menu
	output_prgbox_form " Output for Sketch ${SKETCH_CMD} " "${COMMAND}"
	return $?
}


lib_menu()
{
	${DIALOG} "${_global_dialog_opts[@]}" --title " Libraries menu " \
		--menu "Select action:" $((_H*2/3)) $((_W*2/3)) $((_H/3)) \
		"deps" "Check dependencies status for the specified library" \
		"download" "Downloads one or more libraries without installing them" \
		"examples" "Shows the list of the examples for libraries" \
		"install" "Installs one or more specified libraries into the system" \
		"list" "Shows a list of installed libraries" \
		"search" "Searches for one or more libraries data" \
		"uninstall" "Uninstalls one or more libraries" \
		"update-index" "Updates the libraries index" \
		"upgrade" "Upgrades installed libraries" \
		2> ${tempfile}
	RC=$?
	if ! get_result ${RC}; then
		return 0
	fi
	LIB_CMD="$(cat ${tempfile})"
	COMMAND="${COMMAND} lib ${LIB_CMD}"
	case "${LIB_CMD}" in
		deps) inputbox_form "Library" "Check dependencies status for the specified library. Eg: LIBRARY[@VERSION_NUMBER](S)" ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			;;
		download) inputbox_form "Library" "Downloads one or more libraries without installing them.. Eg: LIBRARY[@VERSION_NUMBER](S)" ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			;;
		examples) inputbox_extra_form "Library" "Shows the list of the examples for libraries. Empty for all. Eg: LIBRARY_NAME" "" "FQBN"
			RC=$?
			COMMAND+=" $(cat ${tempfile})"
			if ! get_result ${RC}; then
				case "${RC}" in
					"${DIALOG_CANCEL}") return 0
							;;
					"${DIALOG_EXTRA}") inputbox_form "Examples" "Show libraries for the specified board FQBN" "$DEFAULT_BOARD"
							[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
							EXAMP_FLAG=" --fqbn $(cat ${tempfile})"
							COMMAND+=" $(cat ${tempfile})"
							;;
				esac
			fi
			;;
		install) ${DIALOG} "${_global_dialog_opts[@]}" --title " Available options for libraries install" \
			--checklist "Select git or zip. Select or no deps." $((_H*2/3)) $((_W*2/3)) 3 \
			"git-url" "Enter git url for libraries hosted on repositories" off \
			"zip-path" "Enter a path to zip file" off \
			"no-deps" "Do not install dependencies" off \
			2> ${tempfile}
			RC=$?
			if ! get_result ${RC}; then
				return 0
			fi
			j=0
			FLAGS=( $(cat "${tempfile}") )
			while [ $j -ne ${#FLAGS[*]} ]; do
				case ${FLAGS[$j]} in
					git-url) inputbox_form " Libraries " "Enter git url for libraries hosted on repositories" ""
						[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
						COMMAND+=" --git-url $(cat ${tempfile})"
						;;
					zip-path) inputbox_form " Libraries " "Enter a path to zip file" ""
						[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
						COMMAND+=" --zip-path $(cat ${tempfile})"
						;;
					no-deps) COMMAND+=" --no-deps"
						;;
				esac
				(( j++ ))
			done
			;;
		list) ${DIALOG} "${_global_dialog_opts[@]}" --title " Available options for libraries list" \
			--radiolist "Choose an option" $((_H*2/3)) $((_W*2/3)) 3 \
			"all" "Include built-in libraries (from platforms and IDE) in listing" off \
			"fqbn" "Show libraries for the specified board FQBN" off \
			"updatable" "List updatable libraries" off \
			2> ${tempfile}
			RC=$?
			if ! get_result ${RC}; then
				return 0
			fi
			FLAG="$(cat "${tempfile}")"
			case ${FLAG} in
				all) COMMAND+=" --all"
					;;
				updatable) COMMAND+=" --updatable"
					;;
				fqbn) inputbox_form " Libraries " "Enter a FQBN to search" "$DEFAULT_BOARD"
					[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
					COMMAND+=" --fqbn $(cat ${tempfile})"
					;;
			esac
			;;
		search) inputbox_form " Libraries " "Search for one or more libraries data (case insensitive search)" ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			;;
		uninstall) inputbox_form " Libraries " "Uninstalls one or more libraries" ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			;;
		update-index) ;;
		upgrade) inputbox_form " Libraries " "This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available." ""
			[[ $? -eq ${DIALOG_CANCEL} ]] && return 0
			COMMAND+=" $(cat ${tempfile})"
			;;
	esac
	global_flags_menu
	waiting_form "Libraries"
	output_textbox_form " Output for Library ${LIB_CMD} " "${COMMAND}"
	return $?
}

main_menu()
{
	if [ -z "${1}" ]; then
		${DIALOG} "${_global_dialog_opts[@]}" --title " Available commands " \
			--menu "Select command. ESC or Cancel to quit the script." $((_H*2/3)) $((_W*2/3)) $((_H/3)) \
			"sketch" "Arduino CLI sketch commands" \
			"debug" "Debug Arduino sketches" \
			"compile" "Compiles Arduino sketches" \
			"upload" "Upload Arduino sketches" \
			"board" "Arduino board commands" \
			"burn-bootloader" "Upload the bootloader" \
			"cache" "Arduino cache commands" \
			"core" "Arduino core operations" \
			"config" "TODO - Arduino configuration commands" \
			"lib" "Arduino commands about libraries" \
			"outdated" "Lists cores and libraries that can be upgraded" \
			"update" "Updates the index of cores and libraries to the latest versions" \
			"upgrade" "Upgrades installed cores and libraries to latest version" \
			"daemon" "TODO - Run as a daemon on port 50051" \
			2> ${tempfile}
		RC=$?
		get_result ${RC}
		[[ $? -eq ${DIALOG_CANCEL} ]] && exit 0

		MAIN_CMD="$(cat "${tempfile}")"
	else
		MAIN_CMD="$1"
	fi
	case "${MAIN_CMD}" in
		board) board_menu ;;
		burn-bootloader) burn_menu ;;
		cache) cache_menu ;;
		compile) compile_menu ;;
		config) ;;
		core) core_menu ;;
		daemon) ;;
		debug) debug_menu ;;
		lib) lib_menu ;;
		outdated) COMMAND+=" outdated"
			global_flags_menu
			output_prgbox_form "List of cores and/or libraries that can be upgraded. Empty if nothing needs to be upgraded" "${COMMAND}"
			;;
		sketch) sketch_menu ;;
		update) COMMAND+=" update --show-outdated"
			global_flags_menu
			output_prgbox_form "Updates the index of cores and libraries to the latest versions" "${COMMAND}"
			;;
		upgrade) COMMAND+=" upgrade"
			global_flags_menu
			output_prgbox_form "Upgrades installed cores and libraries to latest version" "${COMMAND}"
			;;
		upload) upload_menu ;;
	esac
	RC="$?"
	COMMAND="${ACLI}"
}

get_term_size _H _W
main_menu "$@"
while [ "${RC}" -eq 0 ]; do
	get_term_size _H _W
	main_menu
done
exit 0
