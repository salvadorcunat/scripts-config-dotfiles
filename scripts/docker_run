#!/bin/bash

DIALOG=/usr/bin/dialog

DIALOG_OK=0					#
DIALOG_CANCEL=1					#
DIALOG_HELP=2					# Possible dialog return values
DIALOG_EXTRA=3					# for $?
DIALOG_ITEM_HELP=4				#
DIALOG_ESC=255					#

SIG_NONE=0					#
SIG_HUP=1					#
SIG_INT=2					# System signals for trap
SIG_QUIT=3					#
SIG_KILL=9					#
SIG_TERM=15					#

declare -a IMG_REPO=( $(docker images |awk '{printf "%s ", $1}') )
declare -a IMG_TAG=( $(docker images |awk '{printf "%s ", $2}') )
declare -a IMG_ID=( $(docker images |awk '{printf "%s ", $3}') )
_backtitle="dialog based Docker images launcher by boret"
VOLUME=""
COMMAND="docker run"

tempfile=/tmp/test$$

#############################################################################
#				Trap signals				    #
#############################################################################
#trap "set +x; sleep 1; set -x" DEBUG

trap 'rm -f $tempfile $INPUT_F' 0 "$SIG_NONE" "$SIG_HUP" "$SIG_INT" "$SIG_QUIT" "$SIG_TERM"
exec 4<>$tempfile

#############################################################################
#				Functions				    #
#############################################################################

fill_repos()
{
	let n=1
	while [ "$n" -ne "${#IMG_ID[*]}" ]; do
		echo "${IMG_ID[$n]}" "${IMG_REPO[$n]}:${IMG_TAG[$n]}"
		(( n++ ))
	done
}

get_result()
{
	case $1 in
		$DIALOG_CANCEL|$DIALOG_ESC) clear
					    echo "Abortado"
					    exit 3
	esac
}

volume_form()
{
$DIALOG --clear  --backtitle "$_backtitle" --title " Punto de montaje " \
	--form 'Selecciona el punto de montaje en la imagen y el directorio local a montar' $((_H/2)) $((_W/2)) 3 \
"Punto de montaje: "	1 1	/mnt/data	1 21 250 0 \
"Carpeta local: "	2 1	/home/boret/src	2 21 250 0 \
"Opciones de montaje:"	3 1	rw		3 21 250 0 \
2> $tempfile

get_result $?

VOLUME="-v $(cut -d'
' -f2 $tempfile):$(cut -d'
' -f1 $tempfile):$(cut -d'
' -f3 $tempfile)"
}

# Load functions library
. $HOME/sbin/script-funcs.sh

#############################################################################
#                                Main body                                  #
#############################################################################
get_term_size _H _W

$DIALOG --clear --backtitle "$_backtitle" --title " Imágenes disponibles " \
	--menu "Selecciona la imagen:" $((_H/2)) $((_W/2)) 8 \
	$(fill_repos) 2> $tempfile

get_result $?

IMAGE=$(cat "$tempfile")

$DIALOG --clear --backtitle "$_backtitle" --title " Opciones " \
	--checklist "" $((_H/2)) $((_W/2)) 8 \
	"privileged" " " off \
	"CAP_SYS_ADMIN" " " off \
	"v" "Mount a volume" off \
	"i" "Interactive" on \
	"t" "Tty" on 2> $tempfile

get_result $?

declare -a OPTIONS=( $(cat "$tempfile") )

let j=0
while [ $j -ne ${#OPTIONS[*]} ]; do
	case ${OPTIONS[$j]} in
		privileged)	COMMAND="$COMMAND --privileged"
				;;
		CAP_SYS_ADMIN)	COMMAND="$COMMAND -e CAP_SYS_ADMIN"
				;;
		i)		COMMAND="$COMMAND -i"
				;;
		t)		COMMAND="$COMMAND -t"
				;;
		v)		volume_form
				COMMAND="$COMMAND $VOLUME"
				;;
	esac
	(( j++ ))
done

COMMAND="$COMMAND $IMAGE"

$DIALOG --clear --backtitle "$_backtitle" --title " Comando " \
	--inputbox "¿Quieres ejecutar un comando remoto?
Por defecto se ejecuta un shell de bash." $((_H/2)) $((_W/2)) "/bin/bash" 2> $tempfile

get_result $?

COMMAND="$COMMAND $(cat $tempfile)"

$COMMAND

