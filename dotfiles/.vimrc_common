" Subsurface coding style
filetype plugin indent on
filetype detect
set cindent tabstop=8 shiftwidth=8 cinoptions=l1,:0,(0,g0
" TODO: extern "C" gets indented
" TODO: content of class blocks gets indented
"
" And some sane defaults, optional, but quite nice
set nocompatible
syntax on
"colorscheme industry
"colorscheme solarized
"colorscheme darkblue
"colorscheme elflord
"colorscheme wombat256
set rtp+=/home/boret/.vim/bundle/yaflandia
colorscheme yaflandia
set rtp+=/home/boret/.vim/bundle/dracula
if &diff
	colorscheme dracula
endif
"colorscheme dracula
set hls
set is
set nu
set cul
let mapleader=","
set foldcolumn=3
set foldmethod=manual
set sessionoptions=buffers,curdir,folds,globals,localoptions,resize,tabpages,winpos,winsize
" The default blue is just impossible to see on a black terminal
"highlight Comment ctermfg=DarkGrey
" clearly point out when someone have trailing spaces
highlight ExtraWhitespace ctermbg=red guibg=red
" Show trailing whitespace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/

" for powerline
"
set encoding=utf-8
let g:Powerline_symbols = 'fancy'
autocmd FileType text setlocal textwidth=78
highlight Normal ctermbg=none

" Añadimos Vimplate, pero no funciona
"let Vimplate = "/usr/bin/vimplate"

" NERD_tree
"
" Autoarranque si iniciamos vim sin archivo (del FAQ)
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Mapeo de tecla para abrir NERD_tree
map <C-n> :NERDTreeToggle<CR>
"let g:NERDTreeWinPos = "right"
let g:NERDTreeWinSize = 30

" airline
"
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#bufferline#enabled = 1
"let g:airline#extensions#bufferline#overwrite_variables = 1
let g:airline#extensions#branch#enabled = 1	"activa integracion de fugitive
" let g:airline_theme='zenburn'
"let g:airline_theme='powerlineish'
" let g:airline_theme='dark'
"let g:airline_theme='wombat'
" let g:airline_theme='serene'
"let g:airline_theme='tomorrow'
"let g:airline_theme='google_dark'
"let g:airline_theme='yaflandia'
" let g:airline_right_sep='|'
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_powerline_fonts=1
let g:airline#extensions#capslock#enabled = 1
let g:airline#extensions#tagbar#enabled = 1

" powerline
"
"set rtp+=/usr/share/powerline/bindings/vim
set laststatus=2
set showtabline=2
set noshowmode
set t_Co=256

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" gtypist
"
autocmd BufNewFile,BufRead *.typ setf gtypist

"Gitgutter
let g:gitgutter_enabled = 1
let g:gitgutter_highlight_linenrs = 1
let g:gitgutter_preview_win_floating = 0
let g:gutgutter_preview_win_location = 'abo'
set updatetime=100

" Ale
"
let g:ale_sign_warning = ''
"let g:ale_sign_error = ''
let g:ale_sign_error = ''
let g:ale_set_highlights = 0
let g:airline#extensions#ale#enabled = 1
let g:ale_open_list = 1                           "Keep list opened while linting. Use mapped key
let g:ale_list_window_size = 5
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 0                       "Do not lint on openning. Use mapped key
"let g:ale_linters = {
"\	'c': ['gcc'],
"\	'cpp': ['cppcheck'],
"\	'sh': ['shellcheck']
"\}
let g:ale_sh_shellcheck_exclusions = 'SC2164'
nmap <F9> : ALEToggle<CR>

" Tagbar
"
nmap <F8> :TagbarToggle<CR>
let g:tagbar_width = 30
let g:tagbar_zoomwidth = 0
let g:tagbar_case_insensitive = 1
let g:tagbar_indent = 2
let g:tagbar_left = 1

" vimtex plugin
"
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

" ultisnips plugin
"
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsExpandTrigger="<F7>"
let g:UltiSnipsListSnippets="<S-F7>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit='context'
let g:UltiSnipsSnippetsDir="/home/boret/.vim/snips"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]

" neodebug plugin
"
let g:neodbg_debugger              = 'gdb'           " gdb,pdb,lldb
let g:neodbg_gdb_path              = '/usr/bin/gdb'  " gdb path
let g:neodbg_cmd_prefix            = 'DBG'           " default command prefix
let g:neodbg_console_height        = 15              " gdb console buffer hight, Default:
let g:neodbg_openbreaks_default    = 0               " Open breakpoints window, Default: 1
let g:neodbg_openstacks_default    = 1               " Open stackframes window, Default: 0
let g:neodbg_openthreads_default   = 0               " Open threads window, Default: 0
let g:neodbg_openlocals_default    = 1               " Open locals window, Default: 1
let g:neodbg_openregisters_default = 0               " Open registers window, Default: 0
let g:neodbg_keymap_toggle_breakpoint  = '<C-B>'     " toggle break point on current line
let g:neodbg_keymap_print_variable     = '<C-P>'     " view variable under the cursor

" vim-arduino plugin
"
let g:arduino_run_headless = 0
let g:arduino_upload_using_programmer = 0
function! ArduinoStatusLine()
  let port = arduino#GetPort()
  let line = '[' . g:arduino_board . '] [' . g:arduino_programmer . ']'
  if !empty(port)
    let line = line . ' (' . port . ':' . g:arduino_serial_baud . ')'
  endif
  return line
endfunction
autocmd BufNewFile,BufRead *.ino let g:airline_section_x='%{ArduinoStatusLine()}'

" boret
"
command! -nargs=* Arduino vert terminal arduino_cli
